@use './_variables' as *;

@mixin flex($display: flex, $align: center, $justify: center) {
  display: $display;
  align-items: $align;
  justify-content: $justify;
}

@function z-index($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name))+1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

@mixin position($position: absolute, $top: null, $right: null, $bottom: null, $left: null, $z-index: initial) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $z-index;
}

@mixin responsive($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin text-shorten($numLines: 1) {
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-word;
  overflow: hidden;

  @supports (-webkit-line-clamp: $numLines) {
    overflow: hidden;
    word-break: break-word;
    text-overflow: ellipsis;
    white-space: initial;
    display: -webkit-box;
    -webkit-line-clamp: $numLines;
    -webkit-box-orient: vertical;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + '%');
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin vertical-center($pos: undefined) {
  @if variable-exists($pos) {
    position: $pos;
  }

  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin horizontal-center($pos: undefined) {
  @if variable-exists($pos) {
    position: $pos;
  }

  left: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateX(-50%);
  transform: translateX(-50%);
}

@mixin fade($type) {
  @if $type== 'hide' {
    visibility: hidden;
    opacity: 0;
    transition: visibility 0.5s, opacity 0.5s;
  } @else if $type== 'show' {
    visibility: visible;
    opacity: 1;
    transition: visibility 0.5s, opacity 0.5s;
  }
}
